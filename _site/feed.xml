<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-02-01T22:52:42-05:00</updated><id>http://localhost:4000//</id><title type="html">Suk Hwa(JD)’s page</title><subtitle>Student/Novice programmer who fall into programming with ambition.</subtitle><entry><title type="html">Insertion sort</title><link href="http://localhost:4000/insertion-sort/" rel="alternate" type="text/html" title="Insertion sort" /><published>2017-01-27T00:00:00-05:00</published><updated>2017-01-27T00:00:00-05:00</updated><id>http://localhost:4000/insertion%20sort</id><content type="html" xml:base="http://localhost:4000/insertion-sort/">&lt;h2 id=&quot;what-is-insertion-sort&quot;&gt;What is Insertion sort?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Insertion sort is adding a element to the sorted array A[1…i] to make sorted array A[1…i+1] repetitively.&lt;/li&gt;
  &lt;li&gt;Selection sort and bubble sort is decreasing size from A[1…n], but insertion sort is adding elements from A[1] to A[1…n]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-image-to-understand-easily&quot;&gt;Let’s see image to understand easily.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://www.w3resource.com/w3r_images/insertion-sort.png&quot; alt=&quot;insertion sort image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lets-see-pseudo-code&quot;&gt;Let’s see pseudo code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-{.no-highlight}&quot;&gt;insertionSort (A[],n){  // sort A[1...n]
    for i &amp;lt;- 2 to n {              //# 1
		loc &amp;lt;- i - 1;
		newItem &amp;lt;- A[i];
		//At this point, A[1...i-1]is already sorted.
		while (loc &amp;gt;= 1 and newItem &amp;lt; A[loc]){
			A[loc + 1] &amp;lt;- A[loc]
			loc--;
		}    
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;what-about-time-complexity&quot;&gt;What about time complexity?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;#1 for loop circulate n - 1 times just like selection sort.&lt;/li&gt;
  &lt;li&gt;while loop circulate at most i - 1 times.&lt;/li&gt;
  &lt;li&gt;Worst case, A[i] goes to A[1], so needs i - 1 times circulate.&lt;/li&gt;
  &lt;li&gt;Optimun case, A[i] stays its location, while loop dose not process.&lt;/li&gt;
  &lt;li&gt;So, the time complexity is O(n^2).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-java&quot;&gt;Let’s see Java&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-{.java}&quot;&gt;public static void insertionSort(int [] array){
	for (int i = 1; i &amp;lt; array.length; i ++){
		int temp = a[i];
		for(int j = i - 1; j &amp;gt;=0 &amp;amp;&amp;amp; temp &amp;lt; array[j]; j --)
			array[j + 1] = array[j];
		array[j + 1] = temp;
}
&lt;/code&gt;&lt;/pre&gt;</content><category term="Algorithm" /><category term="sort" /><category term="O(n^2)" /><summary type="html">Let's learn about insertion sort.</summary></entry><entry><title type="html">Bubble sort</title><link href="http://localhost:4000/bubble-sort/" rel="alternate" type="text/html" title="Bubble sort" /><published>2017-01-27T00:00:00-05:00</published><updated>2017-01-27T00:00:00-05:00</updated><id>http://localhost:4000/bubble%20sort</id><content type="html" xml:base="http://localhost:4000/bubble-sort/">&lt;h2 id=&quot;what-is-bubble-sort&quot;&gt;What is Bubble sort?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Bubble sort is the one of the simplest sorting algorithms.&lt;/li&gt;
  &lt;li&gt;Bubble sort is similar to selection sort because it moves the biggest element to last index of A[1…n], but the way to move the biggest element to right.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-image-to-understand-easily&quot;&gt;Let’s see image to understand easily.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://www.programiz.com/sites/tutorial2program/files/Bubble-sort-algorithm-programming.jpg&quot; alt=&quot;bubble sort image image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you process bubble sort, you can find the smallest element and replace the location to the first just like selection sort.&lt;/li&gt;
  &lt;li&gt;However, I prefer to find the largest element, so I will go through with finding the largest element.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-pseudo-code&quot;&gt;Let’s see pseudo code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-{.no-highlight}&quot;&gt;bubbleSort (A[],n){  // sort A[1...n]
    for last &amp;lt;- n down to 2 {              //# 1
		sorted &amp;lt;- TRUE;
		for i &amp;lt;- to last -1 {              //# 2
			if(A[i] &amp;gt; A[i + 1]) then {
				A[i] &amp;lt;-&amp;gt; A[i + 1];        
				// # 3 exchanging elements
				sorted &amp;lt;- FALSE;
			}
		}
		if(sorted = TRUE) then return;     
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;what-about-time-complexity&quot;&gt;What about time complexity?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;#1 for loop circulate n - 1 times just like selection sort.&lt;/li&gt;
  &lt;li&gt;#2 for loop circulate last - 1 times.&lt;/li&gt;
  &lt;li&gt;last is decreased by 1 until it starts n to 2, so the total circulation time is  (n-1)+(n-2)+…+2+1 = n(n-1)/2 (by arithmatic sequence).&lt;/li&gt;
  &lt;li&gt;#3 takes constant time to process, so the time complexity is O(n^2).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-java&quot;&gt;Let’s see Java&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-{.java}&quot;&gt;public static void bubbleSort(int [] array){
	int max = 0;
	for( int i = 0; i &amp;lt; array.length; i ++){
		for( int j = 1; j &amp;lt; array.length - i; j ++ ){
			if( array[j] &amp;lt; array[j - 1]){
				max = array[j - 1];
				array[j - 1] = array[j];
				array[j] = max;
			}
		}
	}
	for( int i = 0; i &amp;lt; array.length; i ++){
		System.out.print(array[i] + &quot; &quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;</content><category term="Algorithm" /><category term="sort" /><category term="O(n^2)" /><summary type="html">Let's learn about bubble sort.</summary></entry><entry><title type="html">Selection sort</title><link href="http://localhost:4000/selection-sort/" rel="alternate" type="text/html" title="Selection sort" /><published>2017-01-27T00:00:00-05:00</published><updated>2017-01-27T00:00:00-05:00</updated><id>http://localhost:4000/selection%20sort</id><content type="html" xml:base="http://localhost:4000/selection-sort/">&lt;h2 id=&quot;what-is-selection-sort&quot;&gt;What is selection sort?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Selection sort is the on of the simplest sorting algorithms.&lt;/li&gt;
  &lt;li&gt;Find the biggest element in A[1…n] and replace location to A[n]&lt;/li&gt;
  &lt;li&gt;Find the next biggest element in A[1…n-1] and replace location to A[n-1]&lt;/li&gt;
  &lt;li&gt;Keep find the element until the sorting is done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-image-to-understand-easily&quot;&gt;Let’s see image to understand easily.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://interactivepython.org/runestone/static/pythonds/_images/selectionsortnew.png&quot; alt=&quot;selection sort image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you process selection sort, you can find the smallest element and replace the location to the first.&lt;/li&gt;
  &lt;li&gt;However, I prefer to find the largest element, so I will go through with finding the largest element.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-pseudo-code&quot;&gt;Let’s see pseudo code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-{.no-highlight}&quot;&gt;selectionSort (A[],n){  // sort A[1...n]
    for last &amp;lt;- n down to 2 {
		k &amp;lt;-&amp;gt; theLargest(A,last); // find the biggest element A[k] in A[1...last]
		A[k] &amp;lt;-&amp;gt; A[last];
	}
}
theLargest(A[],last){ // return the biggest element's index in A[1...last]
	largest &amp;lt;- 1;
	for i &amp;lt;- 2 to last
		if(A[i]&amp;gt;A[largest]) then largest -&amp;gt; i;
	return largest;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;what-about-time-complexity&quot;&gt;What about time complexity?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;For selection sort, time complexity is O(n^2).&lt;/li&gt;
  &lt;li&gt;When you see the pseudo code, selectionSort(A[],n)’s for loop circulate n-1 times.&lt;/li&gt;
  &lt;li&gt;Changing the location of the elements takes constant time.&lt;/li&gt;
  &lt;li&gt;For theLagest(A[],last) need to compare n-1 times to find out the biggest elements.&lt;/li&gt;
  &lt;li&gt;While selectionSort(A[],n) is processing, sub array’s size is decreasing n to 2 by for loop.&lt;/li&gt;
  &lt;li&gt;Thus, the total times to compare the elements is (n - 1) + (n - 2) + … + 2 + 1 = n(n - 1)/2 (by arithmatic sequence). And it is O(n^2)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-see-java&quot;&gt;Let’s see Java&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-{.java}&quot;&gt;public static void selectionSort(int [] array){
	int max = 0;
	for( int i = 0; i &amp;lt; array.length; i ++){
		for( int j = 0; j &amp;lt; array.length; j ++ ){
			if( array[j] &amp;lt; array[j + 1]){
				max = array[j + 1];
				array[j + 1] = array[j];
				array[j] = max;
			}
		}
	}
	for( int i = 0; i &amp;lt; array.length; i ++){
		System.out.print(array[i] + &quot; &quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;</content><category term="Algorithm" /><category term="sort" /><category term="O(n^2)" /><summary type="html">Let's learn about selection sort.</summary></entry><entry><title type="html">Resume</title><link href="http://localhost:4000/resume/" rel="alternate" type="text/html" title="Resume" /><published>2017-01-27T00:00:00-05:00</published><updated>2017-01-27T00:00:00-05:00</updated><id>http://localhost:4000/resume</id><content type="html" xml:base="http://localhost:4000/resume/">&lt;p&gt;&lt;img src=&quot;0001.jpg&quot; alt=&quot;resume image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;link-to-pdf&quot;&gt;&lt;strong&gt;&lt;a href=&quot;Suk_Hwa_Ham_Resume.pdf&quot;&gt;Link to pdf&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;</content><summary type="html">This is my resume.</summary></entry><entry><title type="html">Info-Wolf-bot</title><link href="http://localhost:4000/project/" rel="alternate" type="text/html" title="Info-Wolf-bot" /><published>2017-01-27T00:00:00-05:00</published><updated>2017-01-27T00:00:00-05:00</updated><id>http://localhost:4000/project</id><content type="html" xml:base="http://localhost:4000/project/">&lt;h3 id=&quot;facebook-messenger-application-for-korean-students-community&quot;&gt;Facebook messenger application for Korean students community.&lt;/h3&gt;

&lt;h3 id=&quot;the-application-will-have-student-focused-functions-to-help-students&quot;&gt;The application will have student focused functions to help students.&lt;/h3&gt;

&lt;p&gt;It’s coming soon. Sorry for the wait.&lt;/p&gt;</content><summary type="html">Coming soon.(breif information included)</summary></entry></feed>
